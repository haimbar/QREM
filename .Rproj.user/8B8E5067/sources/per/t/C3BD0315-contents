#' Fitting a quantile regression model via the EM algorithm
#'
#' @param func The fitting procedure (lm, lmer, gam).
#' @param linmod A formula (the linear model for fitting in the M step).
#' @param dframe A data frame containing the columns in the formula.
#' @param qn The selected quantile. Must be in (0,1).
#' @param err The initial value for the estimation error (default=10). Must be greater than tol (below).
#' @param maxit The maximum number of EM iterations (default=1000).
#' @param tol The error tolerance level (default=0.001).
#' @param maxInvLambda The maximum value of the weight for WLS fitting (default=300).
#' @return A list containing the following
#' \itemize{
#'   \item coef The estimated regression coefficients (a list).
#'   \item weights The weights used in the WLS solution.
#'   \item iter The number of EM iterations.
#'   \item err The final EM error (convergence criterion).
#'   \item fitted.mod The output from lm(), lmer(), or gam() in the last EM iteration.
#'   \item empq The percentage of points below the regression line (the empirical quantile).
#'   \item ui The quantile regression residuals.
#' }
#' @importFrom lme4 lmer getME fixef ranef
#' @export
#' @examples
#' data(simdf)
#' qremFit <-  QREM("lm",linmod=y~x*x2 +x3, df=simdf, qn=0.2)
#' summary(qremFit$fitted.mod)
QREM <- function(func, linmod, dframe, qn, err=10, maxit=1000, tol=0.001,
                 maxInvLambda=300) {
  n <- nrow(dframe)
  if (func == "lmer") {
    modelFit <- lmer(linmod, data = dframe)
    XX <- getME(modelFit, "X")
    ZZ <- getME(modelFit, "Z")
    y0 <- getME(modelFit, "y")
    modelFitResiduals <- residuals(modelFit)
  } else {
    functionCall <- sprintf("%s(linmod, data=dframe)",func)
    modelFit <- eval(parse(text = functionCall))
    XX <- model.matrix(linmod, dframe)
    y0 <- model.extract(model.frame(linmod, dframe), "response")
    modelFitResiduals <- modelFit$residuals
  }
  ycolnum <- which(colnames(dframe) == as.character(formula(linmod)[2]))
  loglikNew <- as.numeric(logLik(modelFit))
  loglikOld <- loglikNew + 2*err
  invLambda <<- pmin(1/abs(modelFitResiduals), maxInvLambda)
  it <- 0
  # The EM algorithm:
  while ((err > tol) & ((it = it+1) < maxit)) {
    dframe[,ycolnum] <- y0 - (1-2*qn)/invLambda    # reweighted response
    functionCall <- sprintf("%s(linmod, data=dframe, weights = invLambda)", func)
    modelFit <- eval(parse(text = functionCall))
    if (func == "lmer") {
      modelFittedValues <- fitted(modelFit)
      modelCoefs <- list(beta=fixef(modelFit), u=ranef(modelFit))
    } else {
      modelFittedValues <- modelFit$fitted.values
      modelCoefs <- list(beta=modelFit$coefficients)
    }
    invLambda <<- pmin(1/abs(y0 - modelFittedValues), maxInvLambda)
    loglikNew <- as.numeric(logLik(modelFit))
    err <- abs(loglikNew - loglikOld)
    loglikOld <- loglikNew
  }
  ui <- as.vector(y0 - modelFittedValues)
  list(coef=modelCoefs, weights=invLambda, iter=it, err=err,
       fitted.mod = modelFit, empq = 1-mean(ui > 0), ui=ui)
}

#' Bootstrap estimates for a quantile regression model.
#'
#' Not recommended to use in the fixed effects case - the bcov function provides
#'  less variable, and faster estimates through the asymptotic covariance
#'   (Bahadur's representation).
#'
#' @param func The fitting procedure (lm, lmer, gam).
#' @param linmod A formula (the linear model for fitting in the M step).
#' @param dframe0 The design matrix. A data frame containing the columns in the formula specified in linmod.
#' @param qn The selected quantile. Must be in (0,1).
#' @param n The number of samples to be used in the bootstrap.
#' @param sampleFrom A subset of rows in dframe0 to sample from (for mixed models). Default=NULL.
#' @param B The number of bootstrap iterations (default=100)
#' @param err The initial value for the estimation error (default=10).
#' @param maxit The maximum number of EM iterations (default=1000).
#' @param tol The error tolerance level (default=0.001).
#' @param maxInvLambda The maximum value of the weight for WLS fitting (default=300).
#' @param seedno The seed for reproducibility (default=71371).
#' @param showEst Boolean - whether to show an estimated completion time for the bootstrap. Default=FALSE.
#' @return A matrix of the QR coefficients (B rows).
#' @importFrom parallel detectCores makeCluster parLapply clusterExport stopCluster
#' @importFrom gam gam
#' @export
#' @examples
#' \donttest{
#' data(simdf)
#' qremFit <-  QREM("lm",linmod=y~x*x2 +x3, df=simdf, qn=0.2)
#' estBS <- boot.QREM(func="lm", linmod=y~x*x2 +x3, df = simdf, qn=0.2,
#'    n=nrow(simdf), sampleFrom=NULL,B=50)
#' apply(estBS,2,sd)
#' }
boot.QREM <- function(func, linmod, dframe0, qn, n, sampleFrom=NULL,
                      B=100, err=10, maxit=1000, tol=0.001,
                      maxInvLambda=300, seedno=71371, showEst=FALSE) {
  t0 <- Sys.time()
  set.seed(seedno)
  bs_set <- sample(n, replace = TRUE)
  if (! is.null(sampleFrom))
    dframe <- dframe0[which(dframe0[,which(colnames(dframe0) == sampleFrom)] %in% bs_set),]
  else
    dframe <- dframe0[bs_set,]
  qremFit0 <- QREM(func, linmod, dframe, qn, err=err, maxit=maxit,
                  tol=tol, maxInvLambda=maxInvLambda)
  if (B == 1)
    return(qremFit0$coef$beta)

  oneIt <- as.numeric(difftime(Sys.time(), t0, units = "secs"))
  useCores <- detectCores() - 1
  if (showEst){
    cat("One iteration ", ceiling(oneIt), "seconds\n")
    cat("Estimated completion time, using", useCores, " cores >",
        ceiling(oneIt*ceiling(B/useCores))," seconds\n")
  }
  t0 <- Sys.time()
  n_coefs <- length(qremFit0$coef$beta)
  if (! is.null(sampleFrom))
    colNum <- which(colnames(dframe0) == sampleFrom)
  else
    colNum <- 0
  # Initiate cluster
  cl <- makeCluster(useCores)
  clusterExport(cl,varlist=c("func","linmod", "dframe0", "qn","n","QREM",
                             "lm","lmer", "gam",
                             "getME","colNum","fixef","ranef","seedno",
                             "err", "maxit","tol","maxInvLambda","seedno"),
                envir=environment())
  QREMpar=parLapply(cl, 1:(B-1),
                    function(repnum) {
                      set.seed(seedno + 19 * repnum)
                      bs_set <- sample(n, replace = TRUE)
                      if (! is.null(sampleFrom))
                        dframe <- dframe0[which(dframe0[,colNum] %in% bs_set),]
                      else
                        dframe <- dframe0[bs_set,]
                      qremFit <- QREM(func, linmod, dframe, qn, err=err, maxit=maxit,
                                      tol=tol, maxInvLambda=maxInvLambda)
                      qremFit$coef$beta
                    }
  )
  stopCluster(cl)
  if (showEst)
    cat("Actual completion time =", ceiling(as.numeric(difftime(Sys.time(), t0, units = "secs")))," seconds\n")
  rbind(qremFit0$coef$beta, matrix(unlist(QREMpar), ncol = n_coefs, byrow = TRUE))
}


#' Covariance matrix estimation for the fixed effects case using Bahadur's representation
#' @param qremFit A fitted model object, returned by QREM.
#' @param linmod A formula (the linear model for fitting in the M step).
#' @param dframe A data frame containing the columns in the formula.
#' @param qn The selected quantile. Must be in (0,1).
#' @return A covariance matrix for the fixed-effects model.
#' @importFrom KernSmooth bkde
#' @importFrom stats IQR fitted formula logLik model.extract model.frame model.matrix qqplot quantile residuals sd
#' @export
#' @examples
#' data(simdf)
#' qremFit <-  QREM("lm",linmod=y~x*x2 +x3, df=simdf, qn=0.2)
#' covmat <- bcov(qremFit,linmod=y~x*x2 +x3, df=simdf, qn=0.2)
bcov <- function(qremFit, linmod, dframe,qn) {
  ui <- qremFit$ui
  empq <- quantile(ui,qn)
  ui <- ui-empq
  XX <- model.matrix(linmod, dframe)
  bw <- (length(ui))^(-0.2)*0.9*min(sd(ui), IQR(ui)/1.34)
  kdest <- bkde(ui, bandwidth = bw)
  largestNeg <- which.max(kdest$x[kdest$x < 0])
  xs <- c(kdest$x[largestNeg+1], -kdest$x[largestNeg])
  ys <- c(kdest$y[largestNeg], kdest$y[largestNeg+1])
  dFp0 <- sum(xs*ys)/sum(xs)
  solve(t(XX)%*%XX)*qn*(1-qn)/(dFp0^2)
}


#' Quantile regression diagnostics based on the residuals, u_i.
#'
#' For a given predictor, create a qq-plot if continuous, or a spinogram if categorical.
#'
#' @param X A predictor included in the regression.
#' @param varname The predictor's name (for plotting).
#' @param u_i The QR residuals.
#' @param qn The quantile used in the regression.
#' @param plot.it Boolean, if TRUE, will show the histogram of the residuals and the fitted kernel density estimate(default=TRUE).
#' @return A list, as follows, plus the marginal deviance:
#' \itemize{
#'   \item For a continuous predictor, the list is called qqp and contains the output from qqplot().
#'   \item For a categorical variable, the list is called qqlvl, and it contains the empirical percentages of points below the regression line, for each level.
#' }
#' @importFrom graphics abline axis grid hist lines plot rect text
#' @export
#' @examples
#' data(simdf)
#' qremFit <-  QREM("lm",linmod=y~x*x2 +x3, df=simdf, qn=0.2)
#' qrdg <- QRdiagnostics(simdf$x, "x",qremFit$ui, 0.2,  plot.it = TRUE)
#' qrdg <- QRdiagnostics(simdf$x3, "x3",qremFit$ui, 0.2,  plot.it = TRUE)
QRdiagnostics <- function(X, varname, u_i, qn,  plot.it=TRUE) {
  n <- length(u_i)
  empq <- quantile(u_i,qn)
  u_i <- u_i-empq
  kde <- bkde(u_i)
  # calculate the deviance:
  mod.deviance <- -sum(u_i*(qn-(u_i >0)))
  # show the histogram of the residuals and the fitted kernel density estimate:
  if(plot.it) {
    hist(u_i,breaks=ifelse(n > 500, 40, 10),freq=FALSE)
    lines(kde, col=2)
    abline(v=0,col=4,lwd=2)
  }
  # for a given predictor, create a qq-plot (continuous) or a spinogram (categorical)
  posidx <- which(u_i > 0)
  if(class(X) == "numeric") {
    qqp <- qqplot(X[posidx] , X[-posidx], xlim=c(min(X),max(X)),
                  ylim=c(min(X),max(X)),pch=19,cex=0.4,col="blue",
                  xlab = "Q(above)", ylab="Q(below)",
                  main=paste(varname,", q=",qn),  plot.it = plot.it)
    if(plot.it) {
      abline(0,1,col=2, lwd=2)
      grid()
    }
    qqp$dev <- mod.deviance
    return(qqp)
  }
  if(class(X) == "factor") {
    qqlvl <- as.list(colSums(table(u_i[which(u_i < 0)], X[which(u_i < 0)])) / table(X))
    if(plot.it) {
      plot(c(0.25,length(levels(X)))+0.5,c(0,1.2), col=0, axes=F,
           main = paste(varname,", q=",qn), xlab="", ylab="Prob(u < 0)")
      text(1:length(levels(X)), 1.1, levels(X))
      for (i in 1:length(levels(X))) {
        rect(i-0.25,0,i+0.25,qqlvl[i], col = "grey33", border="white")
        rect(i-0.25,qqlvl[i],i+0.25,1, col = "grey77", border="white")
        lines(c(i-0.25, i+0.25), c(qn, qn), col=2, lwd=3)
      }
      abline(h=seq(0.1,0.9, by=0.1), col="white", lwd=0.5, lty=3)
    }
    qqlvl$dev <- mod.deviance
    return(qqlvl)
  }
}



#' A `flat QQ-plot' for a fitted quantile regression model.
#'
#' Showing multiple ('flat') QQ plots for different quantiles using a heatmap.
#'
#' @param x The variable used in the QQ-plot.
#' @param evalx The values of the variable x where the quantiles are calculated.
#' @param M A matrix obtained from QRdiagnostics, applied to multiple quantiles.
#' @param qns The quantiles for which we compute the QQ plot.
#' @param L The number of color levels to be used in the heatmap (default=21).
#' @param minRatio The smallest ratio between expected and observed quantile (default=0).
#' @param maxRatio The largest ratio between expected and observed quantile (default=2).
#' @importFrom grDevices topo.colors
#' @export
#' @examples
#' \donttest{
#' data(simdf)
#' L <- 20
#' qns <- seq(0.1,0.9,by=0.1)
#' xqs <- quantile(simdf$x, probs = (1:(L-1))/L)
#' names(xqs) <- c()
#' qqp  <- matrix(0, nrow=length(xqs), ncol=length(qns))
#' i <- 1
#' for (qn in qns){
#'     qremFit <-  QREM("lm",linmod=y~x*x2 +x3, df=simdf, qn=qn)
#'     qrdg <- QRdiagnostics(simdf$x, "x",qremFit$ui, qn,  plot.it = FALSE)
#'     for (j in 1:(L-1)) {
#'         qqp[j,i] <- length(which(qrdg$y < xqs[j])) / length(which(qrdg$x < xqs[j]))
#'     }
#'     i <- i+1
#' }
#' flatQQplot(simdf$x,xqs,qqp,qns)
#' }
flatQQplot <- function(x, evalx, M, qns, L=21, minRatio=0,maxRatio=2) {
  ycoord <- c(min(x), evalx, max(x))
  cols <- topo.colors(L)
  mdist <- 0.5*min(abs(diff(qns)))
  plot(c(min(qns)-mdist,max(qns)+4*mdist),c(min(x)-0.2*(max(x)-min(x)),max(x)), col=0, axes=F,
       main = "Qy/Qx", xlab="", ylab="x")
  axis(2,at = evalx)
  text(qns, min(x)-0.1*(max(x)-min(x)), qns,cex=0.7)
  text(min(qns)-mdist, min(x)-0.05*(max(x)-min(x)), "q=",cex=0.7)
  qRatioRng <- seq(minRatio,maxRatio,length=L)
  for (i in 1:ncol(M)) {
    lvls <- cut(pmin(M[,i],2), breaks=qRatioRng, include.lowest=TRUE)
    for (j in 1:nrow(M)) {
      rect(qns[i]-mdist/2,ycoord[j],qns[i]+mdist/2,ycoord[j+1],
           col = cols[as.numeric(lvls[j])], border="white")
    }
  }
  rngx <- max(x) - min(x)
  for (j in 1:L) {
    rect(max(qns)+3.5*mdist-mdist,min(x) + (j-1)*rngx/L,
         max(qns)+3.5*mdist+mdist,min(x) + (j)*rngx/L,
         col = cols[j], border="white")
    text(max(qns)+3.5*mdist, min(x)+(j-0.5)*rngx/L, format(qRatioRng[j], digits=3),
         cex = 0.7, col="grey", font = 2)
  }
}

