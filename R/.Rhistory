rqFit <- rq(y ~ x, tau = qn)
if (doPlot) {
lines(x[order(x)],qremFit$fitted.values[order(x)],col=3, lwd=2)
text(median(x),qremFit$beta[1]+median(x)*qremFit$beta[2],paste("q=",qn), col="darkblue")
#    lines(x[order(x)],rqFit$fitted.values[order(x)],col=4, lwd=2,lty=3)
}
}
qremFit$beta
rqFit$coefficients
x
lines(x[order(x)],qremFit$fitted.values[order(x)],col=3, lwd=2)
qremFit$fitted.values[order(x)]
QREM <- function(linmod, qn, err=1, maxit=1000, tol=1e-5,
maxInvLambda=300) {
mf <- model.frame(linmod)
X <- model.matrix(mf)
n <- length(mf$y)
lmfit <- lm(y ~ X-1, data = mf)
lmfit <- lm(linmod, data = mf)
betaInit <- lmfit$coefficients
invLambdaInit <- 1/abs(lmfit$residuals)
invLambdaOld <- invLambdaInit
invLambdaNew <- pmin(invLambdaInit, maxInvLambda)
betaOld <- betaInit
betaNew <- betaInit
#X <- cbind(rep(1,n),x)
L <- diag(rep(1,n))
it <- 0
while ((err > tol) & (it < maxit)){
it <- it+1
diag(L) <- invLambdaNew
betaNew <- solve(t(X)%*%L%*%X) %*% t(X)%*%L%*% (y - (1-2*qn)/invLambdaOld )
#    yw <- y - (1-2*qn)/invLambdaOld
#    gls <- lm(yw ~ X-1, weights = invLambdaOld)
#    mf$y = yw
#    gls <- lm(linmod, data = mf, weights = invLambdaOld)
#    cat(betaNew,"\n", gls$coefficients,"\n")
invLambdaNew <- pmin(1/abs(y - X%*%betaNew), maxInvLambda)
#    invLambdaNew <- pmin(1/abs(lmfit$residuals), maxInvLambda)
err <- sum((betaOld-betaNew)^2) + sum((invLambdaOld-invLambdaNew)^2)
betaOld <- betaNew
invLambdaOld <- invLambdaNew
}
list(beta=betaNew, weights=invLambdaNew, iter=it, err=err,
#     lmfit$fitted.values,
#     empq = 1-length(which(lmfit$residuals > 0))/n)
fitted.values = X%*%betaNew,
empq = 1-length(which(y - X%*%betaNew > 0))/n)
}
doPlot <- TRUE
x1 <- seq(0,1,length.out = 380)
x2 <- seq(0,1,length.out = 120)
y1 <- 3 + 0*x1 + rnorm(380, 0, 0.1)
y2 <- 3 + 1*x2 + rnorm(120, 0, 0.1)
x <- c(x1, x2)
y <- c(y1, y2)
if (doPlot) {
plot(x,y, pch=19,cex=0.5, col="grey66", main="",axes=F)
axis(1); axis(2)
}
for (qn in seq(0.2, 0.8, by=0.2)) {
qremFit <- QREM(y ~ x, qn)
rqFit <- rq(y ~ x, tau = qn)
if (doPlot) {
lines(x[order(x)],qremFit$fitted.values[order(x)],col=3, lwd=2)
text(median(x),qremFit$beta[1]+median(x)*qremFit$beta[2],paste("q=",qn), col="darkblue")
#    lines(x[order(x)],rqFit$fitted.values[order(x)],col=4, lwd=2,lty=3)
}
}
source('~/Dropbox/QRunivariateSim.R')
shiny::runApp('Dropbox/Harvest (1)/shiny')
install.packages("jsonlite")
shiny::runApp('Dropbox/Harvest (1)/shiny')
update.packages("jsonlite")
library("jsonlite")
library("devtools")
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
library("devtools")
require(shiny)
library("Biobase")
require(shiny)
library("Biobase")
library("DT")
library("DT")
library("limma")
library("qvalue")
library("limma")
library("qvalue")
library("DT")
library("limma")
library("qvalue")
library("qvalue")
library("Matrix")
library("Rcpp")
library("RcppArmadillo")
library("Matrix")
library("rlang")
install.packages("DT")
BiocManager::install("qvalue")
install.packages("rlang")
install.packages("rlang")
require(shiny)
library("Biobase")
library("DT")
library("limma")
library("qvalue")
runApp('Dropbox/Harvest (1)/shiny')
runApp('Dropbox/Harvest (1)/shiny')
runApp('Dropbox/Harvest (1)/shiny')
# create an ExpressionSet data file for use by DVX from the edgeR/voom
# pipeline
#
library("limma")
library("edgeR")
BiocManager::install("edgeR")
library("edgeR")
library("Mus.musculus")
library("Mus.musculus")
BiocManager::install("Mus.musculus")
library("Mus.musculus")
install.packages("RMySQL", dependencies = T)
source("https://bioconductor.org/biocLite.R")
biocLite()
# create an ExpressionSet data file for use by DVX from the edgeR/voom
# pipeline
#
library("limma")
library("edgeR")
library("Mus.musculus")
BiocManager::install("Mus.musculus")
BiocManager::install("Mus.musculus")
# Read the data. Change the directory below to match the location of
# the CSV file on your system.
# The following data frame is just used to get the original column names:
dattmp <- read.csv("~/Desktop/ML-Haim-master/data/ICI-1000P-8P-21-10-18/H-4-ICI-1k-AllResults.csv", header=T)
# Read the data, skipping the first 8 rows which contain information about each
# sample.
dat <- read.csv("~/Desktop/ML-Haim-master/data/ICI-1000P-8P-21-10-18/H-4-ICI-1k-AllResults.csv", header=F, skip = 8)
head(dat)
dat <- read.csv("~/Desktop/ML-Haim-master/data/ICI-1000P-8P-21-10-18/H-4-ICI-1k-AllResults.csv", header=F, skip = 8)
# Create variables for LOD, MAX, protein name, and a 1000X16 matrix of
# "expression" values
LOD <- dat[,2] # limit of detection
MAX <- dat[,3] # maximum that can be reliably observed
prot <- dat[,4] # protein name
exprs <- as.matrix(dat[,5:20]) # expression data
# For each sample, if at least one time point gave a value greater than LOD,
# keep the sample. Exclude proteins for which we keep at less than 5 samples.
aboveLOD <- (exprs[,seq(1,15,by=2)] >= LOD) | (exprs[,seq(2,16,by=2)] >= LOD)
exc <- setdiff(1:1000, which(rowSums(aboveLOD) >= 5))
## first filter leaves 930 proteins for the network analysis
exprs <- exprs[-exc,]
protNames <- prot[-exc]
colnames(exprs) <- colnames(dattmp)[-(1:4)]
colnames(exprs)
protNames
head(dat)
protNames
load("~/Desktop/ML-Haim-master/data/ngbrs.RData")
load("~/Desktop/ML-Haim-master/data/ngbrs.RData")
image(expMat)
?regexp
notables <- c("  Ben Franklin and Jefferson Davis",
"\tMillard Fillmore")
# name groups 'first' and 'last'
name.rex <- "(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)"
(parsed <- regexpr(name.rex, notables, perl = TRUE))
name.rex
grep(pattern = name.rex, notables)
grep(name.rex, notables)
grep(name.rex, notables[[1]])
grep("(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)", notables[[1]])
gregexpr(name.rex, notables, perl = TRUE)[[2]]
x <- "http://stat.umn.edu:80/xyz"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
m
load("~/Dropbox/Projects/harvest/Data/COLON.RData")
geneid
genename
library("edgefinde")
library("edgefinder")
hist(Y1)
hist(Y1[,1])
dim(Y)
dim(Y1)
ef <- edgefinder(Y1)
?edgefinder
shortSummary(ef)
plotBitmapCC(ef)
plotBitmapCC(ef, edgefinderobj = TRUE)
update.packages("~/Dropbox/Packages/edgefinder_0.1.1.tar.gz", repos=NULL)
library("edgefinder")
?edgefinder
install.packages("~/Dropbox/Packages/edgefinder_0.1.1.tar.gz", repos=NULL)
library("edgefinder")
?edgefinder
shortSummary()
shortSummary
library("edgefinder")
edgefinder
n <- 100
tm <- 4
z <- kronecker(diag(1,n),rep(1,tm))
x <- rep(c(1:tm)/tm,n) + rnorm(n*tm,0,2e-2)
x
plot(x)
library("edgefinder")
?plotBitmapCC
data(WT)
WTres <- edgefinder(WT, ttl = "Wild Type")
plotBitmapCC(WTres)
plotBitmapCC(WTres$AdjMat)
setwd("~/Dropbox")
# no batch effect
linmod <- y ~ Sex+Race2+Age+I(Age^2)+PayType2+Region+Metro+
Year+Weekend+RecentVisit+ArrivalTime2+Injury+Immediacy
load("EDdata0610.RData")
varnames <- colnames(model.matrix(linmod, dframe))
ncols <- length(varnames)
# hospital is a random effect:
linmodrnd <- y ~ Sex+Race2+Age+PayType2+Region+Metro+
Year+Weekend+RecentVisit+ArrivalTime2+Injury+Immediacy+ (1|HospCode)
ncols2 <- ncols
res2 <- matrix(0,nrow=length(qs), ncol=2*ncols2)
qs <- c(seq(0.1, 0.9, by=0.1))
B <- 99
i=5
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, #length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
source('~/Dropbox/Packages/QREM/R/QREM.R')
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, #length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
library("QREM")
source('~/Dropbox/Packages/QREM/R/QREM.R')
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, #length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
c(colMeans(bsv), apply(bsv,2,sd))
load("res1231.RData")
c(colMeans(bsv), apply(bsv,2,sd)) - res2nw[5,]
plot(c(colMeans(bsv), apply(bsv,2,sd)) - res2nw[5,])
abline(h=0)
plot(c(colMeans(bsv), apply(bsv,2,sd)) - res2w[5,])
abline(h=0)
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, userwgts = dframe$wgts,#length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
dframe$wgts
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, userwgts = "wgts",#length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
res2
bsv
linmodrnd
# hospital is a random effect:
linmodrnd <- y ~ Sex+Race2+Age+I(Age^2)+PayType2+Region+Metro+
Year+Weekend+RecentVisit+ArrivalTime2+Injury+Immediacy+ (1|HospCode)
qs <- c(seq(0.1, 0.9, by=0.1))
# no batch effect
linmod <- y ~ Sex+Race2+Age+I(Age^2)+PayType2+Region+Metro+
Year+Weekend+RecentVisit+ArrivalTime2+Injury+Immediacy
varnames <- colnames(model.matrix(linmod, dframe))
ncols <- length(varnames)
res1nw <- matrix(0,nrow=length(qs), ncol=2*ncols)
res1w <- matrix(0,nrow=length(qs), ncol=2*ncols)
for (i in 1:length(qs)) {
cat(date(),i,qs[i],"\n")
qremFit <- QREM(lm,linmod, dframe, qs[i])
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i])
res1nw[i,] <- c(as.numeric(qremFit$fitted.mod$coefficients), sqrt(diag(varKED)))
cat(date(),i,qs[i],"\n")
qremFit <- QREM(lm,linmod, dframe, qs[i], userwgts = "wgts")
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i], dframe$wgts)
res1w[i,] <- c(as.numeric(qremFit$fitted.mod$coefficients), sqrt(diag(varKED)))
}
# hospital is a random effect:
linmodrnd <- y ~ Sex+Race2+Age+I(Age^2)+PayType2+Region+Metro+
Year+Weekend+RecentVisit+ArrivalTime2+Injury+Immediacy+ (1|HospCode)
ncols2 <- ncols
# set onlyEstimate = FALSE if you want to get regression coefficient estimates
# without running the bootstrap:
res2nw <- matrix(0,nrow=length(qs), ncol=2*ncols2)
res2w <- matrix(0,nrow=length(qs), ncol=2*ncols2)
res2 <- matrix(0,nrow=length(qs), ncol=2*ncols2)
onlyEstimate <- TRUE
if (onlyEstimate) {
for (i in 1:length(qs)) {
cat(date(),i,qs[i],"\n")
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000)
varKED <- bcov(qremFit, linmod=linmodrnd, dframe, qs[i])
res2nw[i,] <- c(as.numeric(fixef(qremFit$fitted.mod)), sqrt(diag(varKED)))
cat(date(),i,qs[i],"\n")
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000, userwgts = "wgts")
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i], dframe$wgts)
res2w[i,] <- c(as.numeric(fixef(qremFit$fitted.mod)), sqrt(diag(varKED)))
}
} else {
B <- 99
for (i in 1:length(qs)) {
cat(i,qs[i],"\n")
bsv <-   boot.QREM(lmer, linmodrnd, dframe, qs[i], 100, userwgts = "wgts",#length(unique(HospCode)),
sampleFrom = "HospCode", maxit = 2000, B=B,
seedno=336621, showEst = TRUE)
res2[i,] <- c(colMeans(bsv), apply(bsv,2,sd))
}
}
plot(c(colMeans(bsv), apply(bsv,2,sd)) - res2w[5,],main="weights")
for (j in 1:(ncol(res1)/2)) {
mm <- min(res1[,j]-abs(zalpha)*res1[,j+ncol(res1)/2], res2[,j]-abs(zalpha)*res2[,j+ncol(res2)/2])
mm <- mm - abs(mm)*0.1
if (mm > 0) { mm <- 0 }
MM <- max(res1[,j]+abs(zalpha)*res1[,j+ncol(res1)/2], res2[,j]+abs(zalpha)*res2[,j+ncol(res2)/2])
MM <- MM + abs(MM)*0.1
if (MM < 0) { MM <- 0 }
plot(smooth.spline(qs,res1[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
lines(smooth.spline(qs,res2[,j],df=sspldf),col=ciCols[2],lwd=2,lty=2)
yyl <- c(res1[,j]-abs(zalpha)*res1[,j+ncol(res1)/2])
yyu <- c(res1[,j]+abs(zalpha)*res1[,j+ncol(res1)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
xx <- c(sspl$x, rev(sspu$x))
yy <- c(sspl$y, rev(sspu$y))
polygon(xx, yy, col = adjustcolor(ciCols[1], alpha.f=0.1),
border = ciCols[1], lty=1)
if (TRUE) {
yyl <- c(res2[,j]-abs(zalpha)*res2[,j+ncol(res2)/2])
yyu <- c(res2[,j]+abs(zalpha)*res2[,j+ncol(res2)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
xx <- c(sspl$x, rev(sspu$x))
yy <- c(sspl$y, rev(sspu$y))
polygon(xx, yy, col = adjustcolor(ciCols[2], alpha.f=0.1),
border = ciCols[2], lty=1)
}
abline(h=0,lwd=2,col="grey66")
}
for (j in 1:(ncol(res1w)/2)) {
mm <- min(res1w[,j], res1nw[,j],res2w[,j], res2nw[,j])
#mm <- mm - abs(mm)*0.1
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res1w[,j], res1nw[,j],res2w[,j], res2nw[,j])
#MM <- MM + abs(MM)*0.1
if (MM < 0.1) { MM <- 0.1 }
plot(qs,res1w[,j],type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=3)
lines(qs, res1nw[,j],pch=19,col=ciCols[1],lwd=1)
lines(qs, res2w[,j],pch=19,col=ciCols[2],lwd=3)
lines(qs, res2nw[,j],pch=19,col=ciCols[2],lwd=1)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
}
ciCols <- c("navyblue","darkred","orange")
for (j in 1:(ncol(res1w)/2)) {
mm <- min(res1w[,j], res1nw[,j],res2w[,j], res2nw[,j])
#mm <- mm - abs(mm)*0.1
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res1w[,j], res1nw[,j],res2w[,j], res2nw[,j])
#MM <- MM + abs(MM)*0.1
if (MM < 0.1) { MM <- 0.1 }
plot(qs,res1w[,j],type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=3)
lines(qs, res1nw[,j],pch=19,col=ciCols[1],lwd=1)
lines(qs, res2w[,j],pch=19,col=ciCols[2],lwd=3)
lines(qs, res2nw[,j],pch=19,col=ciCols[2],lwd=1)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
}
save(res1w, res1nw,res2w, res2nw,file="ERresults0101.RData")
res <- res2w
mm <- min(res[,j])
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res[,j])
if (MM < 0.1) { MM <- 0.1 }
plot(smooth.spline(qs,res[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
yyl <- c(res[,j]-abs(zalpha)*res[,j+ncol(res)/2])
yyu <- c(res[,j]+abs(zalpha)*res[,j+ncol(res)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
# parameter estimates with 95% confidence intervals for each predictor, by quantile
# for the two models (with/without random effect) using smooth splines
sspldf=6
mm <- min(res[,j])
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res[,j])
if (MM < 0.1) { MM <- 0.1 }
plot(smooth.spline(qs,res[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
yyl <- c(res[,j]-abs(zalpha)*res[,j+ncol(res)/2])
yyu <- c(res[,j]+abs(zalpha)*res[,j+ncol(res)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
zalpha <- qnorm(0.025)
mm <- min(res[,j])
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res[,j])
if (MM < 0.1) { MM <- 0.1 }
plot(smooth.spline(qs,res[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
yyl <- c(res[,j]-abs(zalpha)*res[,j+ncol(res)/2])
yyu <- c(res[,j]+abs(zalpha)*res[,j+ncol(res)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
xx <- c(sspl$x, rev(sspu$x))
yy <- c(sspl$y, rev(sspu$y))
polygon(xx, yy, col = adjustcolor(ciCols[1], alpha.f=0.1),
border = ciCols[1], lty=1)
xx
yy
j=2
mm <- min(res[,j])
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res[,j])
if (MM < 0.1) { MM <- 0.1 }
plot(smooth.spline(qs,res[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
yyl <- c(res[,j]-abs(zalpha)*res[,j+ncol(res)/2])
yyu <- c(res[,j]+abs(zalpha)*res[,j+ncol(res)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
xx <- c(sspl$x, rev(sspu$x))
yy <- c(sspl$y, rev(sspu$y))
polygon(xx, yy, col = adjustcolor(ciCols[1], alpha.f=0.1),
border = ciCols[1], lty=1)
for (j in 1:(ncol(res)/2)) {
mm <- min(res[,j])
if (mm > -0.1) { mm <- -0.1 }
MM <- max(res[,j])
if (MM < 0.1) { MM <- 0.1 }
plot(smooth.spline(qs,res[,j],df=sspldf),type='l', axes=F, ylim=c(mm,MM),
main=varnames[j], ylab="Coef.", xlab="quantile",col=ciCols[1],lwd=2)
axis(1,labels=seq(0,1,by=0.1), at=seq(0,1,by=.1)); axis(2)
yyl <- c(res[,j]-abs(zalpha)*res[,j+ncol(res)/2])
yyu <- c(res[,j]+abs(zalpha)*res[,j+ncol(res)/2])
sspl <- smooth.spline(qs, yyl, df=sspldf)
sspu <- smooth.spline(qs, yyu, df=sspldf)
xx <- c(sspl$x, rev(sspu$x))
yy <- c(sspl$y, rev(sspu$y))
polygon(xx, yy, col = adjustcolor(ciCols[1], alpha.f=0.1),
border = ciCols[1], lty=1)
abline(h=0,lwd=2,col="grey66")
grid()
}
yy
res2w[,50]
res2nw[,50]
res2nw[,50]/res2w[,50]
source('~/Dropbox/Packages/QREM/R/QREM.R')
linmodrnd
di(dframe)
dim(dframe)
qs[i]
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000)
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000, userwgts = "wgts")
i=6
qs[i]
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000, userwgts = "wgts")
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i], dframe$wgts)
DM[,1:ncol(XX)] <- Diagonal(length(userwgts),userwgts)%*%DM[,1:ncol(XX)]
sqrt(diag(varKED))
res2nw[,50]
res2w[,50]
bcov
?lmer
qremFit$fitted.mod
sum(dframe$wgts)
dframe1=dframe
dframe$wgts=dframe$wgts/sum(dframe$wgts)
qremFit <- QREM(lmer,linmodrnd, dframe, qs[i], maxit = 2000, userwgts = "wgts")
qremFit$fitted.mod
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i], dframe$wgts)
sqrt(diag(varKED))
res2w[,27:52]
res2w[6,,27:52]
res2w[6,27:52]
sqrt(diag(varKED))
res2nw[6,27:52]
source('~/Dropbox/Packages/QREM/R/QREM.R')
varKED <- bcov(qremFit, linmod=linmod, dframe, qs[i], dframe$wgts)
sqrt(diag(varKED))
source('~/Dropbox/Packages/QREM/R/QREM.R')
setwd("~/Documents/Projects/QR")
city="LasVegas"
dat <- read.csv(sprintf("data/%s.csv", city), header=TRUE)
nas <- union(which(is.na(dat$TMAX)),which(is.na(dat$TMIN)))
if(length(nas) > 0) { dat <- dat[-nas,] }
dat$DATE <- as.Date(dat$DATE, "%Y-%m-%d")
dat$year <- as.numeric(format(dat$DATE,"%Y"))
dat$month <- factor(months(dat$DATE), levels = month.name)
dat$yday <- as.numeric(format(dat$DATE,"%j"))
dat$sinedoy <- sin(2*pi*(dat$yday-11)/365-pi/2)
# fit a QR model to the daily minimum temperatures with q=0.1, 0.9
qn <- 0.1
linmod <- TMAX ~ s(yday,4) + year + month
qremFit10max <- QREM("gam", linmod, dat,qn = qn, maxInvLambda=1000)
qremFit10max <- QREM(gam, linmod, dat,qn = qn, maxInvLambda=1000)
?gam
qremFit10max <- QREM(gam, linmod, dat,qn = qn, maxInvLambda=1000, family="gaussian")
qremFit10max$fitted.mod
qremFit10max$fitted.mod$coefficients
X <- data.frame(cbind(dat$sinedoy, dat$month, dat$year))
colnames(X) <- c("sinedoy","month", "year")
QRdiagnostics(dat$year, "year", qremFit10max$ui,  qn)
qremFit$iter
setwd("~/Dropbox/Packages/QREM/R")
